*1. Day1 [Fundamentals of JS] - Topics to learns backend
    a) Introduction
    b) Fundamentals of JavaScript
    c) Arrays [ foreach , map , filter , find , indexof ]
    d) Objects in JavaScript
    e) Functions and return
    f) Asynchronous JavaScript coding

-------------------------------------------------------------------------------------------------
*2. Day2 [Introduction to Node.js]  
     a)Introduction
        Node.js is a cross-platform, open-source JavaScript runtime environment that can run on Windows, Linux, Unix, macOS, and more. Node.js runs on the V8 JavaScript engine.

     b)Installing Node.js and npm.
        i) Download and install node js from internet.
        ii) How to check installed or not [go to terminal type node -v, if version come its install]
        iii) Node will give us run time environment untill it run on terminal

        iV) npm init -y to install package.json

     c)Working with Node and npm

     d)Working with Modules
        i)filesystem
          a)writeFile
          b)appendFile
          c)copyfile
          d)rename
          e)unlink
          f)rmdir [remove directory]

        ii)http
          a)createserver
          b)http

     e)File system operations
     f)Understanding HTTP module  

-------------------------------------------------------------------------------------------------
*3. Day3 [NPM Basics & Advanced Features]    
   a)Introduction
      npm -> node pacakage manager
      NPM is short for node package manager, an online directory that contains the various already registered open-source packages. 

   b)NPM Understanding
      NPM is a package manager used to install, delete, and update Javascript packages on your machine. 
      NPX is a package executer, and it is used to execute javascript packages directly, without installing them.
      
   c)Installing and uninstalling anything basics & advanced
      i)install -> npm i packageName or npm install packageName
      ii)ubstall -> npm uninstall packageName

   d)Installing particular versions
      ->npm i packageName@1.0.1 [version] 

   e)Understanding Node modules
      In Node. js, Modules are the blocks of encapsulated code that communicate with an external application on the basis of their related functionality. 
      Modules can be a single file or a collection of multiple files/folders.

   f)Dependencies & Devdependencies
      A dependency is a library that a project needs to function effectively. 
      DevDependencies are the packages a developer needs during development.

   g)Scripts - understanding default scripts PATH and custom scripts 


-------------------------------------------------------------------------------------------------

*4. Day4 [Express.js, Routing & Middleware]    
   a)Introduction to Express.js
      Express is a node js web application framework that provides broad features for building web and mobile applications. 
      Manages everything from receiving the request and giving the response.
      It is used to build a single page, multipage, and hybrid web application. 
      It's a layer built on the top of the Node js that helps manage servers and routes.

   b)Setting up a basic Express application
      i)npm i express
      ii)const express = require("express");
         const app = express();

         app.get("/", function (req, res) {
            res.send("Hello Express js");
         });
         // 3333 is port
         app.listen(3333); 

   c)Routing
      Is like gives path after the domain like www.google.com/photos
      /photos are route
      ex - app.get("/" or "route", function (req, res) {}

   d)Middleware
      Express middleware is a function that is compiled during the lifecycle of the Express server.

      the middleware can end the HTTP request independently or transfer it to another middleware using the next function. It will allow you to categorize the code and generate reusable middleware, just like chaining.

      jab bhi server request accept karta he waha se route ke beach pahuchne tak agar app us request ko beech me rockte ho and kuch perfome karto ho, to ye elemene Middleware kahalata he.

   //*Example of Middleware

      // const express = require("express");
      // const app = express();
   //!this is middleware
      // app.use(function (req, res, next) {
      //   console.log("Middle Ware is Running.....");
      //   next();
      // });
      // app.get("/", function (req, res) {
      //   res.send("Hello Express Js");
      //   console.log("Running Successfull");
      // });

   e)Request and response handling
// frontEnd -> backEnd -> frontEnd is called Request and response handling.

   f)Error handling
   //! Example
   // const express = require("express");
   // const app = express();

   // route is /shank like a path after domain host
   // app.get("/shank", function (req, res, next) {
   // res.send("Hello Shankar");
   //   return next(new Error("Not Implemented !!!"));
   // });

   //* this is error handle
   // app.use((err, req, res, next) => {
   //   console.error(err.stack);
   //   res.status(500).send("Something went wrong!!");
   // });

   // 3333 is port
   // app.listen(3333);

-------------------------------------------------------------------------------------------------
*5. Day5 [Form Handling, Sessions & Cookies]    
   a)Form handling

   b)What is Session & Cookies theoretical

   c)express.json & express.urlencoded


-------------------------------------------------------------------------------------------------
*6. Day6 [EJS, Dynamic routing, Initializing project]    

   a)Idea of mini project
   
   b)Initialize a project with npm
      i)npm install -y
      ii)npm install express

   c)Steps for project learning 
   
   d)Setting up parsers for form
      app.use(express.json());
      app.use(express.urlencoded({ extended: true }));

   e)Setting up ejs for ejs pages [ejs is same as htm but we can do dynamic calculation with this]
      i)npm install ejs

      ii)setup ejs as view engine
        -> app.set("view engine", "ejs");
        -> app.get("/", (req, res) => {
               // to get render through html
                  res.render("index");
               });
      iii)> create views folder 
            -> create index.ejs file to render on internet      

   f)Setting up public static files
      i)we want to use css,images,javascript
      
   g)Dynamic routing
      => //*dynamic routing
         // :username is dynamic path
         // req.params.username to get the value
         app.get("/profile/:username", (req, res) => {
            // res.send(`Welcome - ` + req.params.username);
            res.send(`Welcome - ${req.params.username}`);
         });

-------------------------------------------------------------------------------------------------

*7